/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
  id 'com.bmuschko.docker-remote-api' version '6.4.0'
  id 'dev.clojurephant.clojure' version '0.5.0'
  id 'com.github.johnrengelman.shadow' version '5.2.0'
  id 'maven-publish'
}

import java.text.DateFormat
import java.text.SimpleDateFormat

def getDate() {
    DateFormat df = new SimpleDateFormat("yyyyMMdd");

    return df.format(new Date());
}

description = "Cassandra/DSE Configuration Builder Library"
group = 'datastax'
version = '1.0.2-' + getDate()

repositories {
  mavenCentral()
  maven {
    name = 'clojars'
    url = 'https://repo.clojars.org'
  }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

clojure {
    builds {
        main {
            aotAll()
        }
    }
}

sourceSets {
    main {
        clojure.srcDirs = ['src']

        resources {
            srcDirs = ['resources']
        }
    }
    test {
        clojure {
            it.srcDirs = ['test']
        }
        resources {
            srcDirs = ['test']
        }
    }
    dev {
        clojure.srcDirs = ['dev']
    }
}

// Docker publishing


if (project.hasProperty('dockerRegistry')) {
    ext.set('imagePrefix', ("$dockerRegistry/" - 'http://' - 'https://') + 'datastax' + '/cass-config-builder')
} else {
    ext.set('imagePrefix', 'datastax' + '/cass-config-builder')
}

docker {
    registryCredentials {
        if (project.hasProperty('dockerRegistry')) {
            url = project.dockerRegistry
        }
        if (project.hasProperty('dockerRegistryUsername'))
        {
            username = project.dockerRegistryUsername
        }

        if (project.hasProperty('dockerRegistryPassword'))
        {
            password = project.dockerRegistryPassword
        }
    }
}

configurations {
    compile {
        exclude group: 'org.clojure', module: 'tools.trace'

        // exclude commons-logging and log4j as we will be using slf4j
        // bridges for those libraries
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'log4j', module: 'log4j'
    }
    devCompile.extendsFrom testCompile
}

dependencies {
    implementation "org.clojure:clojure:1.10.1"
    implementation "org.clojure:core.match:0.3.0-alpha5"
    implementation "org.clojure:core.memoize:0.5.9"
    implementation "slingshot:slingshot:0.12.2"
    implementation "org.yaml:snakeyaml:1.23"
    implementation "cheshire:cheshire:5.8.0"
    implementation ("selmer:selmer:1.12.27") { // templating lib
        exclude module: 'hiccups'
        exclude module: 'cheshire'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-core'
        exclude group: 'com.fasterxml.jackson.dataformat', module: 'jackson-dataformat-smile'
    }
    devImplementation "org.clojure:tools.namespace:0.3.0-alpha4"
    testImplementation "junit:junit:4.12"
}

test {
     systemProperties project.properties.subMap(["definitions.location"])
}

jar {
    manifest {
        attributes 'Main-Class': 'com.datastax.configbuilder.CassOperatorConfigBuilder'
    }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      groupId = 'com.datastax'
      artifactId = 'cass-config-builder'

      from components.java

      pom {
        name = 'ConfigBuilder'
        description = 'A library to produce cassandra configuration files.'
        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }
      }
    }
  }

  repositories {
    maven {
      if (project.hasProperty('repoUrl')) {
        url = repoUrl
        credentials {
          username repoUsername
          password repoPassword
        }
      }
    }
  }
}

assemble.dependsOn shadowJar

import com.bmuschko.gradle.docker.tasks.image.*

task copyDockerBuildCtx(type: Sync) {
    into "$buildDir/docker"
    from ("cass-config-definitions/resources") {
        into "definitions"
    }
    from 'docker'
    from shadowJar
}

task dockerDebianImage(type: DockerBuildImage, group: 'Docker', description: 'Build cass-config-builder based on Debian') {
    dependsOn copyDockerBuildCtx
    inputDir = copyDockerBuildCtx.destinationDir
    dockerFile = new File(inputDir.get().asFile, "debian.Dockerfile")
    labels.put("release", "${version}")
    images.add("${imagePrefix}/cass-config-builder:${version}")
}

task dockerRedHatImage(type: DockerBuildImage, group: 'Docker', description: 'Build cass-config-builder based on Red Hat') {
    dependsOn copyDockerBuildCtx
    inputDir = copyDockerBuildCtx.destinationDir
    dockerFile = new File(inputDir.get().asFile, "redhat.Dockerfile")
    labels.put("release", "${version}")
    images.add("${imagePrefix}/cass-config-builder:${version}-ubi7")
}

task dockerImages(group: 'Docker', description: 'Build cass-config-builder docker images') {
    dependsOn dockerDebianImage
    dependsOn dockerRedHatImage
}

task pushDockerImages(type: DockerPushImage, group: 'Docker', description: "Push Docker image to registry specified with 'dockerRegistry' property") {
    dependsOn dockerDebianImage, dockerRedHatImage

    images.addAll(dockerDebianImage.images.getOrNull().asList())
    images.addAll(dockerRedHatImage.images.getOrNull().asList())
}

clojureRepl {
    port = 7888
    // add extracted server functions to the classpath
    classpath += sourceSets.main.runtimeClasspath
    forkOptions {
        jvmArgs << "-D${project.name}.version=$version"
    }
}

assemble.dependsOn dockerImages
check.dependsOn assemble
